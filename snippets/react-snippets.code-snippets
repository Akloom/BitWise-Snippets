{
  "Tag with module classes": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      ".{}"
    ],
    "body": [
      "<${1:tagName} className={styles.${2:className}}>$3</${1:tagName}>"
    ],
    "description": "Tag with module style name"
  },
  "JS arrow function": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      "bw-jsaf"
    ],
    "body": [
      "import './${TM_FILENAME_BASE}.css'",
      "",
      "const ${TM_FILENAME_BASE} = (${1:params}) => {",
      "\treturn(",
      "\t\t<div>",
      "\t\t\t<h1>${TM_FILENAME_BASE}</h1>",
      "\t\t</div>",
      "\t)",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "JS arrow function"
  },
  "TS arrow function": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      "bw-tsaf"
    ],
    "body": [
      "import './${TM_FILENAME_BASE}.css'",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "}",
      "",
      "const ${TM_FILENAME_BASE} = (${1:params}: ${TM_FILENAME_BASE}Props) => {",
      "\treturn(",
      "\t\t<div>",
      "\t\t\t<h1>${TM_FILENAME_BASE}</h1>",
      "\t\t</div>",
      "\t)",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "JS arrow function"
  },
  "JS arrow function with module styles": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      "bw-jsaf-module"
    ],
    "body": [
      "import styles from './${TM_FILENAME_BASE}.module.css'",
      "",
      "const ${TM_FILENAME_BASE} = (${1:params}) => {",
      "\treturn(",
      "\t\t<div>",
      "\t\t\t<h1>${TM_FILENAME_BASE}</h1>",
      "\t\t</div>",
      "\t)",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "JS arrow function"
  },
  "TS arrow function with module styles": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      "bw-tsaf-module"
    ],
    "body": [
      "import styles from './${TM_FILENAME_BASE}.module.css'",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "}",
      "",
      "const ${TM_FILENAME_BASE} = (${1:params}: ${TM_FILENAME_BASE}Props) => {",
      "\treturn(",
      "\t\t<div>",
      "\t\t\t<h1>${TM_FILENAME_BASE}</h1>",
      "\t\t</div>",
      "\t)",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "TS arrow function"
  },
  "Map method": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      "bw-map"
    ],
    "body": [
      "{${1:array}.map((item, index) => (",
      "\t<div key={index}></div>",
      "))}"
    ],
    "description": "Map method"
  },
  "Foreach method": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      "bw-foreach"
    ],
    "body": [
      "{${1:array}.forEach((item, index) => (",
      "\t<div key={index}></div>",
      "))}"
    ],
    "description": "Foreach method"
  },
  "Use state": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      "bw-state"
    ],
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialValue});"
    ],
    "description": "useState"
  },
  "Fetch request": {
    "scope": "javascript,typescript",
    "prefix": [
      "bw-fetch"
    ],
    "body": [
      "fetch('${1:API_URL}')",
      "\t.then(response => {",
      "\t\tif (!response.ok) {",
      "\t\t\tthrow new Error('Response was not ok');",
      "\t\t}",
      "\t\treturn response.json();",
      "\t})",
      "\t.then(data => {",
      "\t\tconsole.log('Data received:', data);",
      "\t})",
      "\t.catch(error => {",
      "\t\tconsole.error('Fetch error:', error);",
      "\t});",
    ],
    "description": "Default fetch request"
  }
}